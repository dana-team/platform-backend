name: tests
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run unit-tests
        run: make test

  e2e-tests:
    name: e2e-tests
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      REPOSITORY_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run go vet
        run: go vet ./...

      - name: Set Kubernetes context
        uses: Azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BACKEND_CI_CLUSTER_KUBECONFIG }}

      - name: Install prereq
        run: | 
          make install-prereq \
          PROVIDER_DNS_REALM=${{ secrets.PROVIDER_DNS_REALM }} \
          PROVIDER_DNS_KDC=${{ secrets.PROVIDER_DNS_KDC }} \
          PROVIDER_DNS_POLICY=${{ secrets.PROVIDER_DNS_POLICY }} \
          PROVIDER_DNS_NAMESERVER=${{ secrets.PROVIDER_DNS_NAMESERVER }} \
          PROVIDER_DNS_USERNAME=${{ secrets.PROVIDER_DNS_USERNAME }} \
          PROVIDER_DNS_PASSWORD=${{ secrets.PROVIDER_DNS_PASSWORD }}

      - name: Set Kubernetes context
        uses: Azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BACKEND_CI_HUB_CLUSTER_KUBECONFIG }}

      - name: Setup hub cluster
        run: | 
          make setup-hub \
          PLACEMENT_NAME=test-ci \
          PLACEMENTS_NAMESPACE=test-ci-ns \
          MANAGED_CLUSTER_NAME=${{ secrets.BACKEND_CI_CLUSTER_NAME }}

      - name: Await rcs addons to be ready
        run: |
          until kubectl get mca rcs-score -n ${{ secrets.BACKEND_CI_CLUSTER_NAME }} -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' | grep -q "True"; do echo "Waiting for rcs addons to be ready..."; sleep 5; done; echo "rcs addons is ready"
          until kubectl get mca capp-status-addon -n ${{ secrets.BACKEND_CI_CLUSTER_NAME }} -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' | grep -q "True"; do echo "Waiting for rcs addons to be ready..."; sleep 5; done; echo "rcs addons is ready"

      - name: Log into ghcr.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add IMAGE_TAG env property with commit short sha
        run: echo "IMAGE_TAG=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Build and push docker image
        run: make docker-build docker-push IMG=${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}:${IMAGE_TAG}

      - name: Deploy backend
        run: | 
          make deploy \
          IMG_REPO=${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }} \
          IMG_TAG=${IMAGE_TAG} \
          CLUSTER_NAME=${{ secrets.BACKEND_CI_HUB_CLUSTER_NAME }} \
          CLUSTER_DOMAIN=${{ secrets.BACKEND_CI_CLUSTER_DOMAIN }}

      - name: Await backend to be ready
        run: until kubectl get capp platform-backend -n platform-backend-system -o jsonpath='{.status.knativeObjectStatus.conditions[?(@.type=="Ready")].status}' | grep -q "True"; do echo "Waiting for Capp to be ready..."; sleep 5; done; echo "Capp is ready"

      - name: Run e2e tests
        run: make test-e2e

      - name: Undeploy backend
        run: make undeploy
        if: always()

      - name: Cleanup hub
        run: |
          make cleanup-hub \
          PLACEMENT_NAME=test-ci \
          PLACEMENTS_NAMESPACE=test-ci-ns \
          MANAGED_CLUSTER_NAME=${{ secrets.BACKEND_CI_CLUSTER_NAME }}
        if: always()

      - name: Set Kubernetes context
        uses: Azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BACKEND_CI_CLUSTER_KUBECONFIG }}
        if: always()

      - name: Uninstall prereq
        run: make uninstall-prereq
        if: always()